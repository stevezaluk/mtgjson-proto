syntax = "proto3";

package deck;

import "card/card_set.proto";
import "meta/mtgjson_api.proto";

option go_package = "github.com/stevezaluk/mtgjson-models/deck";

/*
Deck - Represents an MTGJSON deck

See here for more info: https://mtgjson.com/data-models/deck

This model has been changed slightly from the original model to seperate out lists for
both the card ids and for cards themselves. This way we can store just the ID's in the database
and fill the contents field before it gets returned to the user
*/
message Deck {
    string name = 1; // @gotags: bson:"name"
    string code = 2; // @gotags: bson:"code"
    string type = 3; // @gotags: bson:"type"
    string releaseDate = 4; // @gotags: bson:"releaseDate"
    repeated DeckContent commander = 6; // gotags: bson:"commander"
    repeated DeckContent mainBoard = 7; // @gotags: bson:"mainBoard"
    repeated DeckContent sideBoard = 8; // @gotags: bson:"sideBoard"
    meta.MTGJSONAPIMeta mtgjsonApiMeta = 9; // @gotags: bson:"mtgjsonApiMeta"
}

/*
DeckContent - Represents an Card within the deck. The card field is only populated when it
is processed by the API and not when it is stored within the database. This is to ensure that there are
not duplicated card models across the database
 */
message DeckContent {
    int64 quantity = 1; // @gotags: bson:"quantity"
    string mtgjsonV4Id = 2; // @gotags: bson:"mtgjsonV4Id"
    repeated card.CardSet card = 3; // @gotags: bson:"card"
}