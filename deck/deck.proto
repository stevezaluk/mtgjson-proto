syntax = "proto3";

package deck;

import "card/card_set.proto";
import "meta/mtgjson_api.proto";

option go_package = "github.com/stevezaluk/mtgjson-models/deck";

/*
Deck - Represents an MTGJSON deck

See here for more info: https://mtgjson.com/data-models/deck

This model has been changed slightly from the original model to seperate out lists for
both the card ids and for cards themselves. This way we can store just the ID's in the database
and fill the contents field before it gets returned to the user
*/
message Deck {
    string name = 1; // @gotags: bson:"name"
    string code = 2; // @gotags: bson:"code"
    string type = 3; // @gotags: bson:"type"
    string releaseDate = 4; // @gotags: bson:"releaseDate"
    DeckContents contents = 5; // @gotags: bson:"contents"
    meta.MTGJSONAPIMeta mtgjsonApiMeta = 6; // @gotags: bson:"mtgjsonApiMeta"
}

/*
DeckContents - Represents the contents of a deck. Each board is stored here
 */
message DeckContents {
    repeated DeckContentEntry commander = 1; // gotags: bson:"commander"
    repeated DeckContentEntry mainBoard = 2; // @gotags: bson:"mainBoard"
    repeated DeckContentEntry sideBoard = 3; // @gotags: bson:"sideBoard"
}

/*
DeckContentEntry - Represents a single entry within a deck's board. The card field
is left nil when stored within the database and is filled in during call time. This is
to ensure there are not duplicated models across the database
 */
message DeckContentEntry {
    int64 quantity = 1; // @gotags: bson:"quantity"
    string mtgjsonV4Id = 2; // @gotags: bson:"mtgjsonV4Id"
    repeated card.CardSet card = 3; // @gotags: bson:"card"
}