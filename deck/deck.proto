syntax = "proto3";

package deck;

import "card/card_set.proto";
import "meta/mtgjson_api.proto";

option go_package = "github.com/stevezaluk/mtgjson-models/deck";

/*
Deck - Represents an MTGJSON deck

See here for more info: https://mtgjson.com/data-models/deck

This model has been changed slightly from the original model to seperate out lists for
both the card ids and for cards themselves. This way we can store just the ID's in the database
and fill the contents field before it gets returned to the user
*/
message Deck {
    string name = 1; // @gotags: bson:"name"
    string code = 2; // @gotags: bson:"code"
    string type = 3; // @gotags: bson:"type"
    string releaseDate = 4; // @gotags: bson:"releaseDate"
    DeckContentIds contentIds = 5; // @gotags: bson:"contentIds"
    DeckContents contents = 6; // @gotags: bson:"contents"
    meta.MTGJSONAPIMeta mtgjsonApiMeta = 7; // @gotags: bson:"mtgjsonApiMeta"
}

/*
DeckContentIds - Represents the MTGJSON v4 ID's that make up a deck
*/
message DeckContentIds {
    repeated string mainBoard = 1; // @gotags: bson:"mainBoard"
    repeated string sideBoard = 2; // @gotags: bson:"sideBoard"
    repeated string commander = 3; // @gotags: bson:"commander"
}

/* 
DeckContents - Represents the MTGJSON Cards of the decks and its boards
*/
message DeckContents {
    repeated card.CardSet mainBoard = 1; // @gotags: bson:"mainBoard"
    repeated card.CardSet sideBoard = 2; // @gotags: bson:"sideBoard"
    repeated card.CardSet commander = 3; // @gotags: bson:"commander"
}